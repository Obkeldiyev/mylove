<!DOCTYPE html>
<html lang="en">
  <head>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <title>Chat Room</title>
    <link rel="manifest" href="../../../manifest.json" />
    <script src="/socket.io/socket.io.js"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #f9e1e6, #fce7ec);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-y: none;
        touch-action: manipulation;
        transition: background 0.3s ease;
      }

      body.dark-mode {
        background: linear-gradient(135deg, #2c2c2c, #1f1f1f);
        color: #fff;
      }

      #home-btn {
        position: fixed;
        top: 12px;
        left: 12px;
        font-size: 24px;
        color: #e91e63;
        cursor: pointer;
        z-index: 1000;
        transition: transform 0.3s ease, color 0.3s ease;
      }

      #home-btn:hover {
        color: #c2185b;
        transform: scale(1.15) rotate(5deg);
      }

      .title-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.8rem;
      }

      h2 {
        text-align: center;
        color: #d81b60;
        font-size: clamp(1.4rem, 4.5vw, 1.8rem);
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        animation: pulse 3s infinite ease-in-out;
      }

      #like-btn,
      #dark-mode-btn {
        font-size: 22px;
        color: #e91e63;
        cursor: pointer;
        margin-left: 8px;
        transition: transform 0.3s ease, color 0.3s ease;
      }

      #like-btn:hover,
      #dark-mode-btn:hover {
        color: #c2185b;
        transform: scale(1.15);
      }

      #like-btn.liked {
        color: #c2185b;
        transform: scale(1.2);
      }

      #chat-box {
        flex: 1;
        margin: 0.8rem;
        padding: 1.2rem;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
        overflow-y: auto;
        max-height: calc(100vh - 160px);
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-y: contain;
        touch-action: pan-y;
        will-change: transform;
      }

      body.dark-mode #chat-box {
        background: rgba(50, 50, 50, 0.95);
      }

      .message {
        margin-bottom: 0.8rem;
        padding: 0.6rem 0.9rem;
        border-radius: 10px;
        background: linear-gradient(145deg, #fff0f3, #ffe4e9);
        animation: slideIn 0.3s ease-out;
        font-size: clamp(0.85rem, 2.2vw, 0.95rem);
        line-height: 1.4;
        word-wrap: break-word;
        position: relative;
        transition: background 0.3s ease, transform 0.2s ease;
      }

      body.dark-mode .message {
        background: linear-gradient(145deg, #444, #555);
      }

      .message:hover {
        transform: scale(1.02);
      }

      .message strong {
        color: #c2185b;
        font-weight: 600;
      }

      .message .seen-status {
        position: absolute;
        bottom: 4px;
        right: 8px;
        font-size: 12px;
        color: #999;
      }

      .message .seen-status.seen::after {
        content: "✓✓";
        color: #4caf50;
      }

      .message .seen-status:not(.seen)::after {
        content: "✓";
        color: #999;
      }

      .message .file {
        margin-top: 0.5rem;
        max-width: 200px;
      }

      .message .file img,
      .message .file video {
        max-width: 100%;
        border-radius: 8px;
        cursor: pointer;
      }

      .message .file a {
        color: #e91e63;
        text-decoration: none;
        font-size: 0.9rem;
      }

      .message .voice-message {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        background: linear-gradient(145deg, #f8f8f8, #e0e0e0);
        padding: 0.6rem;
        border-radius: 12px;
        max-width: 280px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      body.dark-mode .message .voice-message {
        background: linear-gradient(145deg, #555, #666);
      }

      .message .voice-message:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .message .voice-message button {
        background: linear-gradient(45deg, #e91e63, #f48fb1);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        cursor: pointer;
        font-size: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.2s ease, background 0.2s ease;
      }

      .message .voice-message button:active {
        transform: scale(1.1);
      }

      .message .voice-message .waveform {
        flex: 1;
        height: 28px;
        display: flex;
        align-items: center;
        gap: 3px;
      }

      .message .voice-message .waveform .bar {
        width: 5px;
        height: 10px;
        background: linear-gradient(90deg, #e91e63 0%, #f48fb1 100%);
        border-radius: 3px;
        transition: height 0.1s ease;
      }

      .message .voice-message.own .waveform .bar {
        animation: ownWave 1.4s infinite ease-in-out;
      }

      .message .voice-message.own .waveform .bar:nth-child(1) {
        animation-delay: 0s;
      }
      .message .voice-message.own .waveform .bar:nth-child(2) {
        animation-delay: 0.1s;
      }
      .message .voice-message.own .waveform .bar:nth-child(3) {
        animation-delay: 0.2s;
      }
      .message .voice-message.own .waveform .bar:nth-child(4) {
        animation-delay: 0.3s;
      }
      .message .voice-message.own .waveform .bar:nth-child(5) {
        animation-delay: 0.4s;
      }
      .message .voice-message.own .waveform .bar:nth-child(6) {
        animation-delay: 0.5s;
      }

      .message .voice-message .waveform.playing .bar {
        animation: wave 1s infinite ease-in-out;
      }

      .message .voice-message .waveform.playing .bar:nth-child(1) {
        animation-delay: 0s;
      }
      .message .voice-message .waveform.playing .bar:nth-child(2) {
        animation-delay: 0.1s;
      }
      .message .voice-message .waveform.playing .bar:nth-child(3) {
        animation-delay: 0.2s;
      }
      .message .voice-message .waveform.playing .bar:nth-child(4) {
        animation-delay: 0.3s;
      }
      .message .voice-message .waveform.playing .bar:nth-child(5) {
        animation-delay: 0.4s;
      }
      .message .voice-message .waveform.playing .bar:nth-child(6) {
        animation-delay: 0.5s;
      }

      @keyframes wave {
        0% {
          height: 10px;
        }
        50% {
          height: 20px;
        }
        100% {
          height: 10px;
        }
      }

      @keyframes ownWave {
        0% {
          height: 8px;
        }
        50% {
          height: 24px;
        }
        100% {
          height: 8px;
        }
      }

      #typing {
        font-style: italic;
        color: #f06292;
        padding: 0.4rem 1.2rem;
        min-height: 1.4rem;
        font-size: clamp(0.8rem, 1.8vw, 0.85rem);
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      #typing.active {
        opacity: 1;
      }

      #error-message {
        color: #c2185b;
        font-size: 0.85rem;
        padding: 0.4rem 1.2rem;
        text-align: center;
        display: none;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 8px;
        margin: 0.4rem;
        animation: shake 0.3s ease-in-out;
      }

      @keyframes shake {
        0%,
        100% {
          transform: translateX(0);
        }
        25% {
          transform: translateX(-5px);
        }
        75% {
          transform: translateX(5px);
        }
      }

      #chat-form {
        display: flex;
        align-items: center;
        gap: 0.6rem;
        padding: 0.8rem;
        background: rgba(255, 255, 255, 0.9);
        box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.05);
        border-radius: 0;
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        margin: 0;
        z-index: 100;
        transition: transform 0.3s ease;
      }

      body.dark-mode #chat-form {
        background: rgba(50, 50, 50, 0.9);
      }

      #chat-form.keyboard-active {
        transform: translateY(-10px);
      }

      #message-input {
        flex: 1;
        padding: 0.8rem 1rem;
        border: 2px solid #f48fb1;
        border-radius: 20px;
        outline: none;
        font-size: clamp(0.9rem, 2.2vw, 1rem);
        transition: border-color 0.3s ease, transform 0.3s ease;
        background: #fff;
      }

      body.dark-mode #message-input {
        background: #444;
        color: #fff;
        border-color: #666;
      }

      #message-input:focus {
        border-color: #e91e63;
        transform: translateY(-1px);
      }

      #send-btn,
      #file-btn,
      #voice-btn {
        padding: 0.8rem;
        border: none;
        background: #e91e63;
        color: white;
        font-size: clamp(0.9rem, 2.2vw, 1rem);
        border-radius: 20px;
        cursor: pointer;
        min-width: 48px;
        min-height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.3s ease, transform 0.3s ease,
          box-shadow 0.3s ease;
      }

      #send-btn:disabled,
      #file-btn:disabled,
      #voice-btn:disabled {
        background: #f48fb1;
        cursor: not-allowed;
      }

      #send-btn:hover:not(:disabled),
      #file-btn:hover:not(:disabled),
      #voice-btn:hover:not(:disabled) {
        background: #c2185b;
        transform: translateY(-2px);
      }

      #voice-btn.recording {
        background: #c2185b;
        transform: scale(1.2);
        box-shadow: 0 0 8px rgba(200, 24, 91, 0.5);
      }

      #voice-btn:active {
        transform: scale(1.25);
      }

      #file-input {
        display: none;
      }

      #voice-recording-ui {
        display: none;
        position: fixed;
        bottom: calc(90px + env(safe-area-inset-bottom));
        left: 12px;
        right: 12px;
        background: linear-gradient(145deg, #ffffff, #f0f0f0);
        padding: 1rem;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 200;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: #333;
        transform: translateY(20px);
        opacity: 0;
        transition: transform 0.3s ease, opacity 0.3s ease;
        touch-action: none;
      }

      #voice-recording-ui.recording {
        display: flex;
        transform: translateY(0);
        opacity: 1;
      }

      #voice-recording-ui.recording::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.2);
        z-index: -1;
      }

      body.dark-mode #voice-recording-ui {
        background: linear-gradient(145deg, #444, #555);
        color: #fff;
      }

      #voice-recording-ui.sending::after {
        content: "Sending... ⏳";
        position: absolute;
        right: 1rem;
        font-size: 0.9rem;
        color: #e91e63;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        animation: pulse 1.5s infinite;
      }

      #voice-timer {
        font-family: "Roboto Mono", monospace;
        font-weight: 700;
        font-size: 1.1rem;
        position: relative;
      }

      #voice-timer::before {
        content: "●";
        color: #e91e63;
        margin-right: 0.5rem;
        animation: blink 1s infinite;
      }

      @keyframes blink {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0;
        }
      }

      #voice-waveform {
        flex: 1;
        height: 32px;
        display: flex;
        align-items: center;
        gap: 4px;
      }

      #voice-waveform .bar {
        width: 6px;
        background: linear-gradient(90deg, #e91e63 0%, #f48fb1 100%);
        border-radius: 4px;
        transition: height 0.1s ease;
      }

      #voice-cancel {
        color: #e91e63;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 600;
        transition: color 0.2s ease;
      }

      #voice-cancel:hover,
      #voice-cancel:active {
        color: #c2185b;
      }

      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateX(-8px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }

      #scroll-down-btn {
        position: fixed;
        bottom: 100px;
        right: 16px;
        background: #e91e63;
        color: white;
        border: none;
        padding: 12px;
        font-size: 18px;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        display: none;
        z-index: 1000;
        transition: background 0.3s ease, transform 0.3s ease;
      }

      #scroll-down-btn:hover {
        background: #c2185b;
        transform: scale(1.1);
      }

      #scroll-down-btn.new-messages::after {
        content: "!";
        position: absolute;
        top: -4px;
        right: -4px;
        background: #4caf50;
        color: white;
        border-radius: 50%;
        width: 16px;
        height: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
      }

      button[type="button"] {
        -webkit-appearance: none;
        touch-action: manipulation;
      }

      @media (max-width: 600px) {
        body {
          overscroll-behavior-y: none;
        }

        #home-btn {
          font-size: 20px;
          top: 8px;
          left: 8px;
        }

        .title-container {
          padding: 0.6rem;
        }

        h2 {
          font-size: clamp(1.2rem, 4vw, 1.5rem);
        }

        #like-btn,
        #dark-mode-btn {
          font-size: 20px;
          margin-left: 6px;
        }

        #chat-box {
          margin: 0.4rem;
          padding: 0.8rem;
          max-height: calc(100vh - 140px);
          border-radius: 12px;
        }

        .message {
          padding: 0.6rem 0.8rem;
          font-size: clamp(0.85rem, 2vw, 0.9rem);
        }

        #chat-form {
          padding: 0.6rem;
          gap: 0.4rem;
        }

        #message-input {
          padding: 0.7rem 0.9rem;
          font-size: clamp(0.85rem, 2vw, 0.9rem);
          border-radius: 16px;
        }

        #send-btn,
        #file-btn,
        #voice-btn {
          padding: 0.7rem;
          font-size: clamp(0.85rem, 2vw, 0.9rem);
          min-width: 52px;
          min-height: 52px;
        }

        #scroll-down-btn {
          bottom: 90px;
          right: 12px;
          padding: 10px;
          font-size: 16px;
        }

        #voice-recording-ui {
          bottom: calc(90px + env(safe-area-inset-bottom));
          padding: 0.8rem;
          font-size: 0.9rem;
        }

        .message .voice-message {
          max-width: 240px;
        }

        .message .voice-message .waveform {
          gap: 2px;
        }

        .message .voice-message .waveform .bar {
          width: 4px;
          height: 8px;
        }

        #voice-waveform {
          gap: 3px;
        }

        #voice-waveform .bar {
          width: 5px;
        }
      }
    </style>
  </head>
  <body>
    <a
      href="/profile"
      id="home-btn"
      title="Back to Profile"
      aria-label="Back to Profile"
      >♥</a
    >
    <div class="title-container">
      <h2>Welcome to Chat, <%= username %></h2>
      <span id="like-btn" title="Like this chat" aria-label="Like this chat"
        >♥</span
      >
      <span
        id="dark-mode-btn"
        title="Toggle dark mode"
        aria-label="Toggle dark mode"
        >🌙</span
      >
    </div>

    <div id="chat-box" role="log" aria-live="polite">
      <% messages.forEach(msg => { %>
      <div
        class="message"
        data-id="<%= msg.id %>"
        data-username="<%= msg.username %>"
      >
        <strong><%= msg.username %></strong>: <% if (msg.message) { %> <%=
        msg.message %> <% } %> <% if (msg.fileUrl) { %>
        <div class="file">
          <% if (msg.fileUrl.match(/\.(jpg|jpeg|png|gif)$/i)) { %>
          <img src="<%= msg.fileUrl %>" alt="Uploaded image" />
          <% } else if (msg.fileUrl.match(/\.(mp4|webm)$/i)) { %>
          <video src="<%= msg.fileUrl %>" controls preload="metadata"></video>
          <% } else if (msg.fileUrl.match(/\.(mp3|wav|ogg|webm|m4a)$/i)) { %>
          <div
            class="voice-message <%= msg.username === username ? 'own' : '' %>"
          >
            <button
              class="play-btn"
              data-src="<%= msg.fileUrl %>"
              aria-label="Play voice message"
            >
              ▶
            </button>
            <div class="waveform">
              <span class="bar"></span>
              <span class="bar"></span>
              <span class="bar"></span>
              <span class="bar"></span>
              <span class="bar"></span>
              <span class="bar"></span>
            </div>
          </div>
          <% } else { %>
          <a
            href="<%= msg.fileUrl %>"
            target="_blank"
            aria-label="Download file"
            >Download File</a
          >
          <% } %>
        </div>
        <% } %>
        <small style="float: right; color: #999; font-size: 0.75em">
          <%= new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit',
          minute: '2-digit' }) %>
        </small>
        <% if (msg.username === username) { %>
        <span
          class="seen-status <%= msg.seen ? 'seen' : '' %>"
          aria-label="Message status"
        ></span>
        <% } %>
      </div>
      <% }) %>
    </div>

    <div id="typing" aria-live="polite"></div>
    <div id="error-message" role="alert"></div>

    <div id="chat-form" role="form">
      <input
        id="message-input"
        type="text"
        placeholder="Type a message..."
        autocomplete="off"
        aria-label="Type a message"
      />
      <input
        id="file-input"
        type="file"
        accept="image/*,audio/*,video/*,.pdf,.doc,.docx"
        aria-label="Upload file"
      />
      <button
        id="file-btn"
        type="button"
        title="Upload file"
        aria-label="Upload file"
      >
        📎
      </button>
      <button
        id="voice-btn"
        type="button"
        title="Record voice"
        aria-label="Record voice message"
      >
        🎤
      </button>
      <button
        id="send-btn"
        type="button"
        title="Send message"
        aria-label="Send message"
      >
        Send
      </button>
    </div>

    <div
      id="voice-recording-ui"
      role="region"
      aria-label="Voice recording controls"
    >
      <span id="voice-timer" aria-live="polite">00:00</span>
      <div id="voice-waveform">
        <span class="bar"></span>
        <span class="bar"></span>
        <span class="bar"></span>
        <span class="bar"></span>
        <span class="bar"></span>
        <span class="bar"></span>
      </div>
      <span
        id="voice-cancel"
        title="Cancel recording"
        aria-label="Cancel recording"
        >Cancel</span
      >
    </div>

    <button
      id="scroll-down-btn"
      title="Scroll to latest"
      aria-label="Scroll to latest messages"
    >
      ⬇️
    </button>

    <script>
      const socket = io();
      const username = "<%= username %>";
      const chatBox = document.getElementById("chat-box");
      const input = document.getElementById("message-input");
      const form = document.getElementById("chat-form");
      const typingDiv = document.getElementById("typing");
      const errorDiv = document.getElementById("error-message");
      const scrollDownBtn = document.getElementById("scroll-down-btn");
      const fileInput = document.getElementById("file-input");
      const fileBtn = document.getElementById("file-btn");
      const voiceBtn = document.getElementById("voice-btn");
      const sendBtn = document.getElementById("send-btn");
      const likeBtn = document.getElementById("like-btn");
      const darkModeBtn = document.getElementById("dark-mode-btn");
      const voiceRecordingUI = document.getElementById("voice-recording-ui");
      const voiceTimer = document.getElementById("voice-timer");
      const voiceWaveform = document.getElementById("voice-waveform");
      const voiceCancel = document.getElementById("voice-cancel");
      const isDebug = true; // Set to false in production

      let mediaRecorder = null;
      let audioChunks = [];
      let scrollTimeout = null;
      let isSending = false;
      let recordingStartTime = null;
      let recordingInterval = null;
      let audioContext = null;
      let analyser = null;
      let stream = null;
      let newMessages = 0;
      let stopTimeout = null;
      let isMobile =
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          navigator.userAgent
        );

      // Request notification permission
      if (Notification && Notification.permission !== "granted") {
        Notification.requestPermission();
      }

      // Show notification
      function showNotification(title, body) {
        if (Notification.permission === "granted") {
          new Notification(title, { body, icon: "/icons/icon-192x192.png" });
        }
      }

      // Show error
      function showError(message) {
        errorDiv.textContent = message;
        errorDiv.style.display = "block";
        setTimeout(() => {
          errorDiv.textContent = "";
          errorDiv.style.display = "none";
        }, 5000);
        if (message.includes("not supported")) {
          errorDiv.textContent +=
            " Please update your browser or use a compatible one (e.g., Chrome, Safari, Firefox).";
        }
      }

      // Haptic feedback
      function vibrate() {
        if (navigator.vibrate) {
          navigator.vibrate(50); // Shorter vibration for mobile
        }
      }

      // Mobile-specific adjustments
      if (isMobile) {
        // Add touch-action to prevent browser interference
        voiceBtn.style.touchAction = "none";
        sendBtn.style.touchAction = "none";
        fileBtn.style.touchAction = "none";

        // Adjust viewport for mobile keyboards
        const viewport = document.querySelector("meta[name=viewport]");
        if (viewport) {
          viewport.setAttribute(
            "content",
            "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
          );
        }
      }

      // Toggle dark mode
      darkModeBtn.addEventListener("click", () => {
        document.body.classList.toggle("dark-mode");
        darkModeBtn.textContent = document.body.classList.contains("dark-mode")
          ? "☀️"
          : "🌙";
        localStorage.setItem(
          "darkMode",
          document.body.classList.contains("dark-mode") ? "true" : "false"
        );
        vibrate();
      });

      // Load dark mode preference
      if (localStorage.getItem("darkMode") === "true") {
        document.body.classList.add("dark-mode");
        darkModeBtn.textContent = "☀️";
      }

      // Like button
      likeBtn.addEventListener("click", () => {
        likeBtn.classList.toggle("liked");
        vibrate();
      });

      // Socket join
      socket.emit("join", username);

      // Send text message
      async function sendMessage() {
        if (isSending) return;
        const message = input.value.trim();
        const file = fileInput.files[0];
        if (!message && !file) {
          showError("Please enter a message or select a file.");
          return;
        }

        isSending = true;
        sendBtn.disabled = true;
        fileBtn.disabled = true;
        voiceBtn.disabled = true;
        sendBtn.textContent = "Sending...";

        const formData = new FormData();
        if (message) formData.append("message", message);
        if (file) formData.append("file", file);

        try {
          const res = await uploadWithRetry(formData);
          const data = await res.json();
          socket.emit("chat message", {
            username,
            message: data.message,
            fileUrl: data.fileUrl,
            id: parseInt(data.id),
          });

          input.value = "";
          fileInput.value = "";
          typingDiv.textContent = "";
          input.focus();
          scrollToBottom();
        } catch (err) {
          showError(err.message || "Failed to send message.");
        } finally {
          resetForm();
        }
      }

      // Send voice message
      async function sendVoiceMessage(audioFile) {
        if (isSending) return;
        isSending = true;
        sendBtn.disabled = true;
        fileBtn.disabled = true;
        voiceBtn.disabled = true;
        voiceRecordingUI.classList.add("sending");

        const formData = new FormData();
        formData.append("file", audioFile);

        try {
          const res = await uploadWithRetry(formData);
          const data = await res.json();
          socket.emit("chat message", {
            username,
            fileUrl: data.fileUrl,
            id: parseInt(data.id),
          });
          scrollToBottom();
        } catch (err) {
          showError(err.message || "Failed to send voice message.");
        } finally {
          resetForm();
        }
      }

      // Upload with retry
      async function uploadWithRetry(formData, maxRetries = 2) {
        let attempt = 0;
        while (attempt <= maxRetries) {
          try {
            const res = await fetch("/upload", {
              method: "POST",
              body: formData,
              headers: { "X-Username": username },
            });
            if (!res.ok) {
              const error = await res.json();
              throw new Error(
                `Upload failed: ${error.error || res.statusText} (Status: ${
                  res.status
                })`
              );
            }
            return res;
          } catch (err) {
            attempt++;
            if (attempt > maxRetries) throw err;
            if (isDebug)
              console.log(`Upload attempt ${attempt} failed, retrying...`, err);
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }
        }
      }

      // Reset form
      function resetForm() {
        isSending = false;
        sendBtn.disabled = false;
        fileBtn.disabled = false;
        voiceBtn.disabled = false;
        sendBtn.textContent = "Send";
        voiceRecordingUI.classList.remove("sending");
      }

      // Handle button events
      function handleButtonEvent(e) {
        e.preventDefault();
        e.stopPropagation();
        vibrate();
        if (e.currentTarget === sendBtn) {
          sendMessage();
        } else if (e.currentTarget === fileBtn) {
          fileInput.click();
        }
      }

      // Get supported MIME type
      function getSupportedMimeType() {
        const types = [
          { mime: "audio/webm", ext: "webm" },
          { mime: "audio/mp4", ext: "m4a" },
          { mime: "audio/ogg", ext: "ogg" },
        ];
        for (const type of types) {
          if (MediaRecorder.isTypeSupported(type.mime)) {
            return type;
          }
        }
        return null;
      }

      // Voice recording - mobile optimized
      function startVoiceRecording() {
        if (!navigator.mediaDevices || !MediaRecorder) {
          showError("Voice recording is not supported in this browser.");
          return;
        }

        const supportedType = getSupportedMimeType();
        if (!supportedType) {
          showError("No supported audio format found.");
          return;
        }

        // Mobile-specific audio constraints
        const audioConstraints = {
          audio: {
            echoCancellation: true,
            noiseSuppression: true,
            autoGainControl: true,
            channelCount: 1,
          },
        };

        navigator.mediaDevices
          .getUserMedia(audioConstraints)
          .then((micStream) => {
            stream = micStream;
            mediaRecorder = new MediaRecorder(stream, {
              mimeType: supportedType.mime,
            });
            audioChunks = [];

            // Setup Web Audio API for waveform
            try {
              audioContext = new (window.AudioContext ||
                window.webkitAudioContext)();
              analyser = audioContext.createAnalyser();
              const source = audioContext.createMediaStreamSource(stream);
              source.connect(analyser);
              analyser.fftSize = 64; // Reduced for mobile performance
              const bufferLength = analyser.frequencyBinCount;
              const dataArray = new Uint8Array(bufferLength);

              // Update waveform
              function updateWaveform() {
                if (!voiceRecordingUI.classList.contains("recording")) return;
                analyser.getByteFrequencyData(dataArray);
                const bars = voiceWaveform.querySelectorAll(".bar");
                bars.forEach((bar, i) => {
                  const height = (dataArray[i] / 255) * 28;
                  bar.style.height = `${Math.max(6, height)}px`;
                });
                requestAnimationFrame(updateWaveform);
              }

              // Timer
              recordingStartTime = Date.now();
              recordingInterval = setInterval(() => {
                const elapsed = Math.floor(
                  (Date.now() - recordingStartTime) / 1000
                );
                const minutes = String(Math.floor(elapsed / 60)).padStart(
                  2,
                  "0"
                );
                const seconds = String(elapsed % 60).padStart(2, "0");
                voiceTimer.textContent = `${minutes}:${seconds}`;
              }, 1000);

              mediaRecorder.onstart = () => {
                if (isDebug)
                  console.log(
                    "Recording started with MIME type:",
                    supportedType.mime
                  );
              };

              mediaRecorder.ondataavailable = (e) => {
                if (e.data.size > 0) {
                  audioChunks.push(e.data);
                  if (isDebug)
                    console.log("Received audio chunk, size:", e.data.size);
                }
              };

              mediaRecorder.onstop = () => {
                if (isDebug)
                  console.log("Recording stopped, chunks:", audioChunks.length);
                if (audioChunks.length === 0) {
                  showError("No audio data recorded.");
                  cleanupRecording();
                  return;
                }

                const elapsed = (Date.now() - recordingStartTime) / 1000;
                if (elapsed < 0.5) {
                  showError("Recording too short.");
                  cleanupRecording();
                  return;
                }

                const audioBlob = new Blob(audioChunks, {
                  type: supportedType.mime,
                });
                const audioFile = new File(
                  [audioBlob],
                  `voice-${Date.now()}.${supportedType.ext}`,
                  {
                    type: supportedType.mime,
                  }
                );

                if (isDebug)
                  console.log(
                    "Audio file created:",
                    audioFile.name,
                    audioFile.size
                  );
                setTimeout(() => {
                  sendVoiceMessage(audioFile);
                  cleanupRecording();
                }, 500);
              };

              mediaRecorder.onerror = (err) => {
                if (isDebug) console.error("MediaRecorder error:", err);
                showError("Recording failed: " + err.message);
                cleanupRecording();
              };

              mediaRecorder.start(100); // Smaller chunks for mobile
              voiceRecordingUI.classList.add("recording");
              voiceBtn.classList.add("recording");
              voiceBtn.textContent = "⏹";
              updateWaveform();

              // Timeout to detect recording failure
              setTimeout(() => {
                if (mediaRecorder && mediaRecorder.state !== "recording") {
                  showError("Failed to start recording.");
                  cleanupRecording();
                }
              }, 1000);
            } catch (err) {
              console.error("Audio setup error:", err);
              showError("Audio setup failed");
              cleanupRecording();
            }
          })
          .catch((err) => {
            if (isDebug) console.error("getUserMedia error:", err);
            if (
              err.name === "NotAllowedError" ||
              err.name === "PermissionDeniedError"
            ) {
              showError(
                "Microphone access denied. Please enable it in settings."
              );
            } else {
              showError("Failed to start recording: " + err.message);
            }
            cleanupRecording();
          });
      }

      // Stop recording
      function stopRecording() {
        if (mediaRecorder && mediaRecorder.state === "recording") {
          if (stopTimeout) clearTimeout(stopTimeout);
          stopTimeout = setTimeout(() => {
            mediaRecorder.stop();
            if (isDebug) console.log("Recording stopped");
          }, 100);
        }
      }

      // Cleanup recording
      function cleanupRecording() {
        if (isDebug) console.log("Cleaning up recording");
        voiceRecordingUI.classList.remove("recording");
        voiceBtn.classList.remove("recording");
        voiceBtn.textContent = "🎤";
        voiceTimer.textContent = "00:00";
        if (recordingInterval) {
          clearInterval(recordingInterval);
          recordingInterval = null;
        }
        if (audioContext) {
          audioContext
            .close()
            .catch((err) => console.error("AudioContext close error:", err));
          audioContext = null;
        }
        if (stream) {
          stream.getTracks().forEach((track) => track.stop());
          stream = null;
        }
        audioChunks = [];
        mediaRecorder = null;
        if (stopTimeout) {
          clearTimeout(stopTimeout);
          stopTimeout = null;
        }
      }

      // Mobile-optimized voice button events
      if (isMobile) {
        voiceBtn.addEventListener(
          "touchstart",
          (e) => {
            e.preventDefault();
            vibrate();
            startVoiceRecording();
          },
          { passive: false }
        );

        voiceBtn.addEventListener(
          "touchend",
          (e) => {
            e.preventDefault();
            if (voiceRecordingUI.classList.contains("recording")) {
              stopRecording();
            }
          },
          { passive: false }
        );

        voiceBtn.addEventListener(
          "touchcancel",
          (e) => {
            e.preventDefault();
            if (voiceRecordingUI.classList.contains("recording")) {
              cleanupRecording();
              showError("Recording interrupted.");
            }
          },
          { passive: false }
        );
      } else {
        voiceBtn.addEventListener(
          "pointerdown",
          (e) => {
            e.preventDefault();
            vibrate();
            startVoiceRecording();
          },
          { passive: false }
        );

        voiceBtn.addEventListener(
          "pointerup",
          (e) => {
            e.preventDefault();
            if (voiceRecordingUI.classList.contains("recording")) {
              stopRecording();
            }
          },
          { passive: false }
        );
      }

      voiceCancel.addEventListener("click", (e) => {
        e.preventDefault();
        cleanupRecording();
      });

      voiceCancel.addEventListener("touchend", (e) => {
        e.preventDefault();
        cleanupRecording();
      });

      // Other button event listeners
      [sendBtn, fileBtn].forEach((btn) => {
        btn.addEventListener("click", handleButtonEvent, { passive: false });
        btn.addEventListener("touchend", handleButtonEvent, { passive: false });
      });

      // Mobile-optimized input events
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });

      // Mobile-specific input handling
      if (isMobile) {
        // Fix for mobile keyboards pushing content up
        input.addEventListener("focus", () => {
          form.classList.add("keyboard-active");
          setTimeout(() => {
            scrollToBottom();
            // On some mobile browsers, we need to manually scroll the window
            window.scrollTo(0, document.body.scrollHeight);
          }, 300);
        });

        input.addEventListener("blur", () => {
          form.classList.remove("keyboard-active");
          // Delay the scroll adjustment to allow keyboard to fully hide
          setTimeout(() => {
            window.scrollTo(0, 0);
          }, 200);
        });
      } else {
        input.addEventListener("focus", () => {
          form.classList.add("keyboard-active");
          setTimeout(scrollToBottom, 300);
        });

        input.addEventListener("focusout", () => {
          form.classList.remove("keyboard-active");
        });
      }

      input.addEventListener(
        "input",
        debounce(() => {
          socket.emit("typing", username);
        }, 300)
      );

      fileInput.addEventListener("change", () => {
        if (fileInput.files.length > 0) {
          sendMessage();
        }
      });

      // Socket events
      socket.on("chat message", (data) => {
        const div = document.createElement("div");
        div.classList.add("message");
        div.dataset.id = data.id;
        div.dataset.username = data.username;
        const timestamp = new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        });
        let content = `<strong>${data.username}</strong>: `;
        if (data.message) {
          content += data.message;
        }
        if (data.fileUrl) {
          content += `<div class="file">`;
          if (data.fileUrl.match(/\.(jpg|jpeg|png|gif)$/i)) {
            content += `<img src="${data.fileUrl}" alt="Uploaded image" />`;
          } else if (data.fileUrl.match(/\.(mp4|webm)$/i)) {
            content += `<video src="${data.fileUrl}" controls preload="metadata"></video>`;
          } else if (data.fileUrl.match(/\.(mp3|wav|ogg|webm|m4a)$/i)) {
            content += `
        <div class="voice-message ${data.username === username ? "own" : ""}">
          <button class="play-btn" data-src="${
            data.fileUrl
          }" aria-label="Play voice message">▶</button>
          <div class="waveform">
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
          </div>
        </div>`;
          } else {
            content += `<a href="${data.fileUrl}" target="_blank" aria-label="Download file">Download File</a>`;
          }
          content += `</div>`;
        }
        content += `
    <small style="float: right; color: #999; font-size: 0.75em">${timestamp}</small>
    ${
      data.username === username
        ? `<span class="seen-status ${
            data.seen ? "seen" : ""
          }" aria-label="Message status"></span>`
        : ""
    }
  `;
        div.innerHTML = content;
        chatBox.appendChild(div);

        const isUserNearBottom =
          chatBox.scrollHeight - chatBox.scrollTop <=
          chatBox.clientHeight + 100;
        if (data.username === username || isUserNearBottom) {
          scrollToBottom();
        } else {
          newMessages++;
          scrollDownBtn.classList.add("new-messages");
          scrollDownBtn.style.display = "block";
        }

        if (data.username !== username) {
          showNotification(data.username, data.message || "Sent a file");
          const messageId = parseInt(data.id);
          if (!isNaN(messageId)) {
            socket.emit("message seen", { messageId, username });
          }
        }
      });

      socket.on("message seen", ({ messageId }) => {
        const messageEl = document.querySelector(
          `.message[data-id="${messageId}"]`
        );
        if (messageEl) {
          const seenStatus = messageEl.querySelector(".seen-status");
          if (seenStatus) {
            seenStatus.classList.add("seen");
          }
        }
      });

      socket.on("typing", (name) => {
        if (name !== username) {
          typingDiv.textContent = `${name} is typing...`;
          typingDiv.classList.add("active");
          setTimeout(() => {
            typingDiv.textContent = "";
            typingDiv.classList.remove("active");
          }, 2000);
        }
      });

      // Scroll to bottom
      function scrollToBottom() {
        setTimeout(() => {
          chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
          scrollDownBtn.style.display = "none";
          scrollDownBtn.classList.remove("new-messages");
          newMessages = 0;

          // Mobile-specific scroll adjustment
          if (isMobile) {
            window.scrollTo(0, document.body.scrollHeight);
          }
        }, 100);
      }

      // Debounce seen messages
      function debounceSeenMessages() {
        if (scrollTimeout) clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          const messages = document.querySelectorAll(".message");
          messages.forEach((msg) => {
            const rect = msg.getBoundingClientRect();
            const messageId = parseInt(msg.dataset.id);
            const msgUsername = msg.dataset.username;
            if (
              rect.top >= 0 &&
              rect.bottom <= window.innerHeight &&
              !isNaN(messageId) &&
              msgUsername !== username
            ) {
              socket.emit("message seen", { messageId, username });
            }
          });
        }, 300);
      }

      // Debounce utility
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      // Scroll events
      chatBox.addEventListener("scroll", () => {
        const nearBottom =
          chatBox.scrollHeight - chatBox.scrollTop <=
          chatBox.clientHeight + 100;
        scrollDownBtn.style.display = nearBottom ? "none" : "block";
        debounceSeenMessages();
      });

      chatBox.addEventListener("touchmove", () => {
        const nearBottom =
          chatBox.scrollHeight - chatBox.scrollTop <=
          chatBox.clientHeight + 100;
        scrollDownBtn.style.display = nearBottom ? "none" : "block";
        debounceSeenMessages();
      });

      scrollDownBtn.addEventListener("click", scrollToBottom);
      scrollDownBtn.addEventListener("touchend", scrollToBottom);

      // Mobile-optimized audio playback
      chatBox.addEventListener("click", (e) => {
        if (e.target.classList.contains("play-btn")) {
          e.preventDefault();
          const button = e.target;
          const audioSrc = button.dataset.src;
          const waveform = button.nextElementSibling;
          let audio = button.dataset.audio
            ? document.getElementById(button.dataset.audio)
            : null;

          if (audio && !audio.paused) {
            audio.pause();
            button.textContent = "▶";
            waveform.classList.remove("playing");
          } else {
            document
              .querySelectorAll(".voice-message .waveform.playing")
              .forEach((wf) => {
                wf.classList.remove("playing");
                const btn = wf.previousElementSibling;
                btn.textContent = "▶";
                const otherAudio = document.getElementById(btn.dataset.audio);
                if (otherAudio) otherAudio.pause();
              });

            if (!audio) {
              audio = new Audio(audioSrc);
              const audioId = `audio-${Date.now()}`;
              audio.id = audioId;
              button.dataset.audio = audioId;

              // Mobile-specific audio settings
              audio.preload = "metadata";
              audio.muted = false;
              audio.volume = 1.0;
            }

            // Mobile browsers require this to be in a user gesture
            const playPromise = audio.play();

            if (playPromise !== undefined) {
              playPromise
                .then(() => {
                  button.textContent = "⏸";
                  waveform.classList.add("playing");
                  if (waveform.parentElement.classList.contains("own")) {
                    waveform.classList.remove("own");
                  }
                })
                .catch((err) => {
                  showError(
                    "Failed to play audio. Make sure your device isn't muted."
                  );
                  console.error("Audio play error:", err);
                });
            }

            audio.onended = () => {
              button.textContent = "▶";
              waveform.classList.remove("playing");
              if (waveform.parentElement.classList.contains("own")) {
                waveform.classList.add("own");
              }
            };
          }
        }
      });

      // Swipe to reply - mobile optimized
      let touchStartX = 0;
      let touchStartY = 0;
      chatBox.addEventListener(
        "touchstart",
        (e) => {
          touchStartX = e.touches[0].clientX;
          touchStartY = e.touches[0].clientY;
        },
        { passive: true }
      );

      chatBox.addEventListener(
        "touchend",
        (e) => {
          const touchEndX = e.changedTouches[0].clientX;
          const touchEndY = e.changedTouches[0].clientY;
          const deltaX = touchEndX - touchStartX;
          const deltaY = touchEndY - touchStartY;

          // Only consider horizontal swipes with minimal vertical movement
          if (Math.abs(deltaX) > 50 && Math.abs(deltaY) < 30) {
            const message = document
              .elementFromPoint(touchEndX, touchEndY)
              .closest(".message");
            if (message) {
              input.value = `Replying to ${message.dataset.username}: `;
              input.focus();
            }
          }
        },
        { passive: true }
      );

      // Offline handling
      window.addEventListener("offline", () => {
        showError("You are offline. Some features may not work.");
      });

      window.addEventListener("online", () => {
        showError("Back online!");
      });

      // Initial scroll to bottom
      setTimeout(scrollToBottom, 500);

      // Mobile viewport height fix
      function adjustViewport() {
        if (isMobile) {
          const vh = window.innerHeight * 0.01;
          document.documentElement.style.setProperty("--vh", `${vh}px`);
        }
      }

      window.addEventListener("resize", adjustViewport);
      adjustViewport();
    </script>
  </body>
</html>
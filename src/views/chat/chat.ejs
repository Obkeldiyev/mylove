<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <title>Chat Room</title>
    <link rel="manifest" href="../../../manifest.json" />
    <script src="/socket.io/socket.io.js"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #f9e1e6, #fce7ec);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-y: none;
        touch-action: pan-y;
      }

      #home-btn {
        position: fixed;
        top: 12px;
        left: 12px;
        font-size: 22px;
        color: #e91e63;
        cursor: pointer;
        z-index: 1000;
        transition: transform 0.3s ease, color 0.3s ease;
      }

      #home-btn:hover {
        color: #c2185b;
        transform: scale(1.15) rotate(5deg);
      }

      .title-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.8rem;
      }

      h2 {
        text-align: center;
        color: #d81b60;
        font-size: clamp(1.4rem, 4.5vw, 1.8rem);
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        animation: pulse 3s infinite ease-in-out;
      }

      #like-btn {
        font-size: 22px;
        color: #e91e63;
        cursor: pointer;
        margin-left: 8px;
        transition: transform 0.3s ease, color 0.3s ease;
      }

      #like-btn:hover {
        color: #c2185b;
        transform: scale(1.15);
      }

      #like-btn.liked {
        color: #c2185b;
        transform: scale(1.2);
      }

      #chat-box {
        flex: 1;
        margin: 0.8rem;
        padding: 1.2rem;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
        overflow-y: auto;
        max-height: calc(100vh - 160px);
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-y: contain;
        touch-action: pan-y;
      }

      .message {
        margin-bottom: 0.8rem;
        padding: 0.6rem 0.9rem;
        border-radius: 10px;
        background: linear-gradient(145deg, #fff0f3, #ffe4e9);
        animation: slideIn 0.3s ease-out;
        font-size: clamp(0.85rem, 2.2vw, 0.95rem);
        line-height: 1.4;
        word-wrap: break-word;
        position: relative;
      }

      .message strong {
        color: #c2185b;
        font-weight: 600;
      }

      .message .seen-status {
        position: absolute;
        bottom: 4px;
        right: 8px;
        font-size: 12px;
        color: #999;
      }

      .message .seen-status.seen::after {
        content: '✓✓';
        color: #4caf50;
      }

      .message .seen-status:not(.seen)::after {
        content: '✓';
        color: #999;
      }

      .message .file {
        margin-top: 0.5rem;
        max-width: 200px;
      }

      .message .file img {
        max-width: 100%;
        border-radius: 8px;
        cursor: pointer;
      }

      .message .file a {
        color: #e91e63;
        text-decoration: none;
        font-size: 0.9rem;
      }

      .message .voice-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: #f0f0f0;
        padding: 0.5rem;
        border-radius: 8px;
        max-width: 250px;
      }

      .message .voice-message button {
        background: #e91e63;
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .message .voice-message .waveform {
        flex: 1;
        height: 20px;
        display: flex;
        align-items: center;
        gap: 2px;
      }

      .message .voice-message .waveform .bar {
        width: 4px;
        height: 10px;
        background: linear-gradient(90deg, #e91e63 0%, #f48fb1 100%);
        border-radius: 2px;
      }

      .message .voice-message .waveform.playing .bar {
        animation: wave 0.8s infinite ease-in-out;
      }

      .message .voice-message .waveform.playing .bar:nth-child(1) { animation-delay: 0s; }
      .message .voice-message .waveform.playing .bar:nth-child(2) { animation-delay: 0.1s; }
      .message .voice-message .waveform.playing .bar:nth-child(3) { animation-delay: 0.2s; }
      .message .voice-message .waveform.playing .bar:nth-child(4) { animation-delay: 0.3s; }
      .message .voice-message .waveform.playing .bar:nth-child(5) { animation-delay: 0.4s; }
      .message .voice-message .waveform.playing .bar:nth-child(6) { animation-delay: 0.5s; }
      .message .voice-message .waveform.playing .bar:nth-child(7) { animation-delay: 0.6s; }
      .message .voice-message .waveform.playing .bar:nth-child(8) { animation-delay: 0.7s; }

      @keyframes wave {
        0% { transform: scaleY(1); }
        50% { transform: scaleY(2); }
        100% { transform: scaleY(1); }
      }

      #typing {
        font-style: italic;
        color: #f06292;
        padding: 0.4rem 1.2rem;
        min-height: 1.4rem;
        font-size: clamp(0.8rem, 1.8vw, 0.85rem);
      }

      #error-message {
        color: #c2185b;
        font-size: 0.85rem;
        padding: 0.4rem 1.2rem;
        text-align: center;
        display: none;
      }

      #chat-form {
        display: flex;
        align-items: center;
        gap: 0.4rem;
        padding: 0.8rem;
        background: rgba(255, 255, 255, 0.9);
        box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.05);
        border-radius: 0;
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        margin: 0;
        z-index: 100;
      }

      #message-input {
        flex: 1;
        padding: 0.6rem 0.9rem;
        border: 2px solid #f48fb1;
        border-radius: 16px;
        outline: none;
        font-size: clamp(0.85rem, 2.2vw, 0.95rem);
        transition: border-color 0.3s ease, transform 0.3s ease;
        background: #fff;
      }

      #message-input:focus {
        border-color: #e91e63;
        transform: translateY(-1px);
      }

      #send-btn,
      #file-btn,
      #voice-btn {
        padding: 0.6rem;
        border: none;
        background: #e91e63;
        color: white;
        font-size: clamp(0.85rem, 2.2vw, 0.95rem);
        border-radius: 16px;
        cursor: pointer;
        transition: background 0.3s ease, transform 0.3s ease;
      }

      #send-btn:disabled,
      #file-btn:disabled,
      #voice-btn:disabled {
        background: #f48fb1;
        cursor: not-allowed;
      }

      #send-btn:hover:not(:disabled),
      #file-btn:hover:not(:disabled),
      #voice-btn:hover:not(:disabled) {
        background: #c2185b;
        transform: translateY(-1px);
      }

      #file-input {
        display: none;
      }

      #voice-btn.recording {
        background: #c2185b;
      }

      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateX(-8px);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.02);
        }
        100% {
          transform: scale(1);
        }
      }

      #scroll-down-btn {
        position: fixed;
        bottom: 100px;
        right: 16px;
        background: #e91e63;
        color: white;
        border: none;
        padding: 12px;
        font-size: 18px;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        display: none;
        z-index: 1000;
        transition: background 0.3s ease, transform 0.3s ease;
      }

      #scroll-down-btn:hover {
        background: #c2185b;
        transform: scale(1.1);
      }

      button[type="button"] {
        -webkit-appearance: none;
      }

      @media (max-width: 600px) {
        body {
          overscroll-behavior-y: none;
        }

        #home-btn {
          font-size: 18px;
          top: 8px;
          left: 8px;
        }

        .title-container {
          padding: 0.6rem;
        }

        h2 {
          font-size: clamp(1.2rem, 4vw, 1.5rem);
        }

        #like-btn {
          font-size: 18px;
          margin-left: 6px;
        }

        #chat-box {
          margin: 0.4rem;
          padding: 0.8rem;
          max-height: calc(100vh - 140px);
          border-radius: 12px;
        }

        .message {
          padding: 0.5rem 0.8rem;
          font-size: clamp(0.8rem, 2vw, 0.9rem);
        }

        #chat-form {
          padding: 0.6rem;
          flex-wrap: wrap;
        }

        #message-input {
          padding: 0.5rem 0.8rem;
          font-size: clamp(0.8rem, 2vw, 0.9rem);
        }

        #send-btn,
        #file-btn,
        #voice-btn {
          padding: 0.5rem;
          font-size: clamp(0.8rem, 2vw, 0.9rem);
        }

        #scroll-down-btn {
          bottom: 80px;
          right: 12px;
          padding: 10px;
          font-size: 16px;
        }

        .message .voice-message .waveform .bar {
          width: 3px;
          height: 8px;
        }
      }
    </style>
  </head>
  <body>
    <a href="/profile" id="home-btn" title="Back to Profile">♥</a>
    <div class="title-container">
      <h2>Welcome to Chat, <%= username %></h2>
      <span id="like-btn" title="Like this chat" aria-label="Like this chat">♥</span>
    </div>

    <div id="chat-box">
      <% messages.forEach(msg => { %>
        <div class="message" data-id="<%= msg.id %>" data-username="<%= msg.username %>">
          <strong><%= msg.username %></strong>: 
          <% if (msg.message) { %>
            <%= msg.message %>
          <% } %>
          <% if (msg.fileUrl) { %>
            <div class="file">
              <% if (msg.fileUrl.match(/\.(jpg|jpeg|png|gif)$/i)) { %>
                <img src="<%= msg.fileUrl %>" alt="Uploaded image" />
              <% } else if (msg.fileUrl.match(/\.(mp3|wav|ogg|webm|m4a)$/i)) { %>
                <div class="voice-message">
                  <button class="play-btn" data-src="<%= msg.fileUrl %>">▶</button>
                  <div class="waveform">
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                    <span class="bar"></span>
                  </div>
                </div>
              <% } else { %>
                <a href="<%= msg.fileUrl %>" target="_blank">Download File</a>
              <% } %>
            </div>
          <% } %>
          <small style="float: right; color: #999; font-size: 0.75em">
            <%= msg.createdAt %>
          </small>
          <% if (msg.username === username) { %>
            <span class="seen-status <%= msg.seen ? 'seen' : '' %>"></span>
          <% } %>
        </div>
      <% }) %>
    </div>

    <div id="typing"></div>
    <div id="error-message"></div>

    <div id="chat-form">
      <input id="message-input" type="text" placeholder="Type a message..." autocomplete="off" />
      <input id="file-input" type="file" accept="image/*,audio/*,video/*,.pdf,.doc,.docx" />
      <button id="file-btn" type="button" title="Upload file">📎</button>
      <button id="voice-btn" type="button" title="Record voice">🎤</button>
      <button id="send-btn" type="button" title="Send message">Send</button>
    </div>

    <button id="scroll-down-btn" title="Scroll to latest">⬇️</button>

    <script>
      const socket = io();
      const username = "<%= username %>";
      const chatBox = document.getElementById("chat-box");
      const input = document.getElementById("message-input");
      const form = document.getElementById("chat-form");
      const typingDiv = document.getElementById("typing");
      const errorDiv = document.getElementById("error-message");
      const scrollDownBtn = document.getElementById("scroll-down-btn");
      const fileInput = document.getElementById("file-input");
      const fileBtn = document.getElementById("file-btn");
      const voiceBtn = document.getElementById("voice-btn");
      const sendBtn = document.getElementById("send-btn");
      const likeBtn = document.getElementById("like-btn");

      let mediaRecorder;
      let audioChunks = [];
      let scrollTimeout = null;
      let isSending = false;

      if (Notification && Notification.permission !== "granted") {
        Notification.requestPermission();
      }

      function showNotification(title, body) {
        if (Notification.permission === "granted") {
          new Notification(title, { body, icon: "/icons/icon-192x192.png" });
        }
      }

      function showError(message) {
        errorDiv.textContent = message;
        errorDiv.style.display = "block";
        setTimeout(() => {
          errorDiv.textContent = "";
          errorDiv.style.display = "none";
        }, 5000);
      }

      likeBtn.addEventListener("click", () => {
        likeBtn.classList.toggle("liked");
        console.log("likeBtn: Toggled like state", likeBtn.classList.contains("liked"));
      });

      socket.emit("join", username);

      async function sendMessage() {
        console.log("sendMessage: Function called");
        if (isSending) {
          console.log("sendMessage: Already sending, ignoring");
          return;
        }

        const message = input.value.trim();
        const file = fileInput.files[0];
        if (!message && !file) {
          console.log("sendMessage: No message or file provided");
          showError("Please enter a message or select a file.");
          return;
        }

        isSending = true;
        sendBtn.disabled = true;
        fileBtn.disabled = true;
        voiceBtn.disabled = true;
        sendBtn.textContent = "Sending...";
        console.log("sendMessage: Preparing to send", { message, file: file ? file.name : null });

        if (file) {
          const validTypes = [
            "image/jpeg",
            "image/png",
            "image/gif",
            "audio/mpeg",
            "audio/wav",
            "audio/ogg",
            "audio/webm",
            "audio/mp4",
            "video/mp4",
            "video/webm",
            "application/pdf",
            "application/msword",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
          ];
          if (!validTypes.includes(file.type)) {
            console.log("sendMessage: Invalid file type", file.type);
            showError("Unsupported file type. Please upload an image, audio, video, PDF, or Word document.");
            fileInput.value = "";
            resetForm();
            return;
          }
          if (file.size > 10 * 1024 * 1024) {
            console.log("sendMessage: File too large", file.size);
            showError("File is too large. Maximum size is 10MB.");
            fileInput.value = "";
            resetForm();
            return;
          }
        }

        const formData = new FormData();
        if (message) formData.append("message", message);
        if (file) formData.append("file", file);

        try {
          console.log("sendMessage: Sending fetch to /upload");
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout
          const res = await fetch("/upload", {
            method: "POST",
            body: formData,
            headers: { "X-Username": username },
            signal: controller.signal,
          });
          clearTimeout(timeoutId);

          if (!res.ok) {
            const error = await res.json();
            console.log("sendMessage: Fetch failed", error);
            throw new Error(error.error || "Failed to send message");
          }

          const data = await res.json();
          console.log("sendMessage: Fetch successful, emitting socket event", data);
          socket.emit("chat message", {
            username,
            message: data.message,
            fileUrl: data.fileUrl,
            id: parseInt(data.id),
          });

          input.value = "";
          fileInput.value = "";
          typingDiv.textContent = "";
          input.focus();
          scrollToBottom();
        } catch (err) {
          console.error("sendMessage: Error occurred", err);
          if (err.name === "AbortError") {
            showError("Request timed out. Please try again.");
          } else {
            showError(err.message || "Failed to send message. Please try again.");
          }
        } finally {
          resetForm();
        }
      }

      function resetForm() {
        isSending = false;
        sendBtn.disabled = false;
        fileBtn.disabled = false;
        voiceBtn.disabled = false;
        sendBtn.textContent = "Send";
        console.log("resetForm: Form state reset");
      }

      function debounce(func, wait) {
        let timeout;
        return function (...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), wait);
        };
      }

      const debouncedSendMessage = debounce(sendMessage, 200);

      sendBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log("sendBtn: Click event triggered");
        debouncedSendMessage();
      });

      sendBtn.addEventListener("touchend", (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log("sendBtn: Touchend event triggered");
        debouncedSendMessage();
      });

      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          e.stopPropagation();
          console.log("input: Enter key pressed");
          debouncedSendMessage();
        }
      });

      input.addEventListener("input", () => {
        socket.emit("typing", username);
      });

      input.addEventListener("focus", () => {
        setTimeout(scrollToBottom, 300);
      });

      fileBtn.addEventListener("click", (e) => {
        e.preventDefault();
        console.log("fileBtn: Click event triggered");
        fileInput.click();
      });

      fileBtn.addEventListener("touchend", (e) => {
        e.preventDefault();
        console.log("fileBtn: Touchend event triggered");
        fileInput.click();
      });

      fileInput.addEventListener("change", () => {
        if (fileInput.files.length > 0) {
          console.log("fileInput: File selected", fileInput.files[0].name);
          debouncedSendMessage();
        }
      });

      voiceBtn.addEventListener("click", async (e) => {
        e.preventDefault();
        console.log("voiceBtn: Click event triggered");
        if (voiceBtn.classList.contains("recording")) {
          console.log("voiceBtn: Stopping recording");
          mediaRecorder.stop();
          voiceBtn.classList.remove("recording");
          voiceBtn.textContent = "🎤";
        } else {
          if (!navigator.mediaDevices || !MediaRecorder) {
            console.log("voiceBtn: Voice recording not supported");
            showError("Voice recording is not supported in this browser.");
            return;
          }

          try {
            console.log("voiceBtn: Requesting microphone access");
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const mimeType = MediaRecorder.isTypeSupported("audio/webm") ? "audio/webm" : "audio/mp4";
            mediaRecorder = new MediaRecorder(stream, { mimeType });
            audioChunks = [];

            mediaRecorder.ondataavailable = (e) => {
              if (e.data.size > 0) {
                audioChunks.push(e.data);
                console.log("voiceBtn: Received audio data", e.data.size);
              }
            };

            mediaRecorder.onstop = () => {
              console.log("voiceBtn: Recording stopped, processing audio");
              const audioBlob = new Blob(audioChunks, { type: mimeType });
              const extension = mimeType === "audio/webm" ? "webm" : "m4a";
              const audioFile = new File([audioBlob], `voice-${Date.now()}.${extension}`, { type: mimeType });

              fileInput.value = "";
              const dataTransfer = new DataTransfer();
              dataTransfer.items.add(audioFile);
              fileInput.files = dataTransfer.files;

              stream.getTracks().forEach((track) => track.stop());
              console.log("voiceBtn: Audio file created", audioFile.name);
              debouncedSendMessage();
            };

            mediaRecorder.onerror = (err) => {
              console.error("voiceBtn: MediaRecorder error", err);
              showError("Recording failed. Please try again.");
              voiceBtn.classList.remove("recording");
              voiceBtn.textContent = "🎤";
              stream.getTracks().forEach((track) => track.stop());
              resetForm();
            };

            mediaRecorder.start(100);
            voiceBtn.classList.add("recording");
            voiceBtn.textContent = "⏹";
            console.log("voiceBtn: Recording started");
          } catch (err) {
            console.error("voiceBtn: Audio recording failed", err);
            if (err.name === "NotAllowedError" || err.name === "PermissionDeniedError") {
              showError("Microphone access denied. Please allow microphone permissions.");
            } else {
              showError("Failed to start recording. Check microphone permissions or try another browser.");
            }
          }
        }
      });

      voiceBtn.addEventListener("touchend", async (e) => {
        e.preventDefault();
        console.log("voiceBtn: Touchend event triggered");
        voiceBtn.click();
      });

      socket.on("chat message", (data) => {
        console.log("socket: Received chat message", data);
        const div = document.createElement("div");
        div.classList.add("message");
        div.dataset.id = data.id;
        div.dataset.username = data.username;
        const timestamp = new Date().toLocaleTimeString();
        let content = `<strong>${data.username}</strong>: `;
        if (data.message) {
          content += data.message;
        }
        if (data.fileUrl) {
          content += `<div class="file">`;
          if (data.fileUrl.match(/\.(jpg|jpeg|png|gif)$/i)) {
            content += `<img src="${data.fileUrl}" alt="Uploaded image" />`;
          } else if (data.fileUrl.match(/\.(mp3|wav|ogg|webm|m4a)$/i)) {
            content += `
              <div class="voice-message">
                <button class="play-btn" data-src="${data.fileUrl}">▶</button>
                <div class="waveform">
                  <span class="bar"></span>
                  <span class="bar"></span>
                  <span class="bar"></span>
                  <span class="bar"></span>
                  <span class="bar"></span>
                  <span class="bar"></span>
                  <span class="bar"></span>
                  <span class="bar"></span>
                </div>
              </div>`;
          } else {
            content += `<a href="${data.fileUrl}" target="_blank">Download File</a>`;
          }
          content += `</div>`;
        }
        content += `
          <small style="float: right; color: #999; font-size: 0.75em">${timestamp}</small>
          ${data.username === username ? `<span class="seen-status ${data.seen ? 'seen' : ''}"></span>` : ""}
        `;
        div.innerHTML = content;
        chatBox.appendChild(div);

        const isUserNearBottom =
          chatBox.scrollHeight - chatBox.scrollTop <= chatBox.clientHeight + 100;

        if (data.username === username || isUserNearBottom) {
          scrollToBottom();
        }

        if (data.username !== username) {
          showNotification(data.username, data.message || "Sent a file");
          const messageId = parseInt(data.id);
          if (!isNaN(messageId)) {
            console.log(`socket: Emitting message seen for ID: ${messageId}`);
            socket.emit("message seen", { messageId, username });
          }
        }
      });

      socket.on("message seen", ({ messageId }) => {
        const messageEl = document.querySelector(`.message[data-id="${messageId}"]`);
        if (messageEl) {
          const seenStatus = messageEl.querySelector(".seen-status");
          if (seenStatus) {
            seenStatus.classList.add("seen");
            console.log(`socket: Message ${messageId} marked as seen`);
          }
        }
      });

      socket.on("typing", (name) => {
        if (name !== username) {
          typingDiv.textContent = `${name} is typing...`;
          setTimeout(() => (typingDiv.textContent = ""), 2000);
        }
      });

      function scrollToBottom() {
        setTimeout(() => {
          chatBox.scrollTo({ top: chatBox.scrollHeight, behavior: "smooth" });
          scrollDownBtn.style.display = "none";
        }, 100);
      }

      function debounceSeenMessages() {
        if (scrollTimeout) clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          const messages = document.querySelectorAll(".message");
          messages.forEach((msg) => {
            const rect = msg.getBoundingClientRect();
            const messageId = parseInt(msg.dataset.id);
            const msgUsername = msg.dataset.username;
            if (
              rect.top >= 0 &&
              rect.bottom <= window.innerHeight &&
              !isNaN(messageId) &&
              msgUsername !== username
            ) {
              console.log(`debounceSeenMessages: Emitting message seen for ID: ${messageId}`);
              socket.emit("message seen", { messageId, username });
            }
          });
        }, 300);
      }

      chatBox.addEventListener("scroll", () => {
        const nearBottom =
          chatBox.scrollHeight - chatBox.scrollTop <= chatBox.clientHeight + 100;
        scrollDownBtn.style.display = nearBottom ? "none" : "block";
        debounceSeenMessages();
      });

      chatBox.addEventListener("touchmove", () => {
        const nearBottom =
          chatBox.scrollHeight - chatBox.scrollTop <= chatBox.clientHeight + 100;
        scrollDownBtn.style.display = nearBottom ? "none" : "block";
        debounceSeenMessages();
      });

      scrollDownBtn.addEventListener("click", scrollToBottom);

      chatBox.addEventListener("click", (e) => {
        if (e.target.classList.contains("play-btn")) {
          e.preventDefault();
          const button = e.target;
          const audioSrc = button.dataset.src;
          const waveform = button.nextElementSibling;
          let audio = button.dataset.audio ? document.getElementById(button.dataset.audio) : null;

          if (audio && !audio.paused) {
            audio.pause();
            button.textContent = "▶";
            waveform.classList.remove("playing");
          } else {
            document.querySelectorAll(".voice-message .waveform.playing").forEach((wf) => {
              wf.classList.remove("playing");
              const btn = wf.previousElementSibling;
              btn.textContent = "▶";
              const otherAudio = document.getElementById(btn.dataset.audio);
              if (otherAudio) otherAudio.pause();
            });

            if (!audio) {
              audio = new Audio(audioSrc);
              const audioId = `audio-${Date.now()}`;
              audio.id = audioId;
              button.dataset.audio = audioId;
            }

            audio.play().catch((err) => {
              console.error("chatBox: Audio playback failed", err);
              showError("Failed to play audio. Please try again.");
            });
            button.textContent = "⏸";
            waveform.classList.add("playing");

            audio.onended = () => {
              button.textContent = "▶";
              waveform.classList.remove("playing");
            };
          }
        }
      });

      scrollToBottom();
    </script>
  </body>
</html>